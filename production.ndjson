{"_type":"post","_createdAt":"2019-07-16T10:00:00.000+01:00","publishedAt":"2019-07-16T10:00:00.000+01:00","title":"JSCodeshift and ASTs","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./tree.jpg","alt":"Tree"}}]},{"_type":"block","markDefs":[{"_key":"6f63e93ba38d","_type":"link","href":"https://canjs.com"},{"_key":"4d7f76e86ad5","_type":"link","href":"https://github.com/facebook/jscodeshift"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have been working on some open-source tools for "},{"_type":"span","marks":["6f63e93ba38d"],"text":"CanJS"},{"_type":"span","marks":[],"text":". I am working on the migration tool which is used to help upgrade projects to the latest version. We use "},{"_type":"span","marks":["4d7f76e86ad5"],"text":"jscodeshift"},{"_type":"span","marks":[],"text":" to handle these migrations and this was my first time using them and writing them."}]},{"_type":"block","markDefs":[{"_key":"4e090a1dc5fa","_type":"link","href":"https://en.wikipedia.org/wiki/Abstract_syntax_tree"}],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"jscodeshift"},{"_type":"span","marks":[],"text":" allows you to create complex transformations that can read the source file and parse that into an "},{"_type":"span","marks":["4e090a1dc5fa"],"text":"Abstract Syntax Tree (AST)"},{"_type":"span","marks":[],"text":". We can then manipulate it and regenerate the source code."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"AST Explorer"}]},{"_type":"block","markDefs":[{"_key":"6b89c5dbedb3","_type":"link","href":"https://astexplorer.net/"}],"style":"normal","children":[{"_type":"span","marks":["6b89c5dbedb3"],"text":"AST Explorer"},{"_type":"span","marks":[],"text":" has been an "},{"_type":"span","marks":["strong"],"text":"extremely"},{"_type":"span","marks":[],"text":" useful tool in helping me understand AST's and I've been using it to create my transforms live in the browser. It was very helpful to me to see the transformations happening as I was writing the transformation."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To enable the "},{"_type":"span","marks":["code"],"text":"transforms"},{"_type":"span","marks":[],"text":" within "},{"_type":"span","marks":["code"],"text":"AST Explorer"},{"_type":"span","marks":[],"text":" toggle the "},{"_type":"span","marks":["code"],"text":"transform"},{"_type":"span","marks":[],"text":" option within the top navigation bar. By turning this on you can select different types of transformations, as I am working with "},{"_type":"span","marks":["code"],"text":"jscodeshift"},{"_type":"span","marks":[],"text":" I use that option."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Examples"}]},{"_type":"block","markDefs":[{"_key":"b33a7b423e75","_type":"link","href":"https://canjs.com"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let's walk through a simple transformation that will transform "},{"_type":"span","marks":["b33a7b423e75"],"text":"CanJS"},{"_type":"span","marks":["code"],"text":"Component"},{"_type":"span","marks":[],"text":" into a "},{"_type":"span","marks":["code"],"text":"StacheElement"},{"_type":"span","marks":[],"text":" class."}]},{"_type":"code","code":"Component.extend({ tag: 'my-app', view: `<h1>Hello World!</h1>` }) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Will become"}]},{"_type":"code","code":"class MyApp extends StacheElement { static get view () { return `<h1>Hello World!</h1>` } } customElements.define('my-app', MyApp) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Here is a gist with the code used to do the transformation in its most basic form: "},{"_type":"span","marks":["code"],"text":"gist:Mattchewone/18b2b73caaf13db70a85d3e7bfb1008d#transform.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let's try to break this down a little, passing "},{"_type":"span","marks":["code"],"text":"jscodeshift"},{"_type":"span","marks":[],"text":" the source file will generate the "},{"_type":"span","marks":["code"],"text":"AST"},{"_type":"span","marks":[],"text":" and we then call the "},{"_type":"span","marks":["code"],"text":".find"},{"_type":"span","marks":[],"text":" method which allows us to traverse and find something specific within the tree. It will return a "},{"_type":"span","marks":["code"],"text":"Collection"},{"_type":"span","marks":[],"text":" which you can iterate through and modify."}]},{"_type":"code","code":".find(j.CallExpression, { callee: { type: 'MemberExpression', object: { name: 'Component' }, property: { name: 'extend' } } }) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above code, we are looking for a "},{"_type":"span","marks":["code"],"text":"CallExpression"},{"_type":"span","marks":[],"text":" which has a specific "},{"_type":"span","marks":["code"],"text":"callee"},{"_type":"span","marks":[],"text":" and we can specify the type and names of the "},{"_type":"span","marks":["code"],"text":"callee"},{"_type":"span","marks":[],"text":", in this instance, we are looking for "},{"_type":"span","marks":["code"],"text":"Component.extend"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Once we have the results we can iterate over them and modify to our heart's content üòä."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We know the type of result we are going to get and the shape of it, so we can iterate over the properties of the object enabling us to add these back after we have replaced the "},{"_type":"span","marks":["code"],"text":"CallExpression"},{"_type":"span","marks":[],"text":" with a "},{"_type":"span","marks":["code"],"text":"Class"},{"_type":"span","marks":[],"text":" declaration."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We want to restore the "},{"_type":"span","marks":["code"],"text":"view"},{"_type":"span","marks":[],"text":" property and will add this to the class as a static getter property. Here we keep a reference to the "},{"_type":"span","marks":["code"],"text":"view"},{"_type":"span","marks":[],"text":"'s path."}]},{"_type":"code","code":"path.value.arguments[0].properties .forEach(p => { if (p.key.name === 'view') { viewProp = p } }) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now we can replace the "},{"_type":"span","marks":["code"],"text":"CallExpression"},{"_type":"span","marks":[],"text":" with a "},{"_type":"span","marks":["code"],"text":"Class"},{"_type":"span","marks":[],"text":" declaration:"}]},{"_type":"code","code":"j(path).replaceWith( j.classDeclaration( j.identifier(className), j.classBody([ j.methodDefinition( 'get', j.identifier('view'), j.functionExpression( null, [], j.blockStatement([j.returnStatement(viewProp.value)]) ), true ) ]), j.identifier('StacheElement') ) ) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The first "},{"_type":"span","marks":["code"],"text":"identifier"},{"_type":"span","marks":[],"text":" is the name of the class, the second "},{"_type":"span","marks":["code"],"text":"identifier"},{"_type":"span","marks":[],"text":" is optional and it's for adding the name of the "},{"_type":"span","marks":["code"],"text":"superClass"},{"_type":"span","marks":[],"text":". For the "},{"_type":"span","marks":["code"],"text":"classBody"},{"_type":"span","marks":[],"text":" we will just add what was previously the value of the "},{"_type":"span","marks":["code"],"text":"view"},{"_type":"span","marks":[],"text":" property on the "},{"_type":"span","marks":["code"],"text":"CallExpression"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[{"_key":"fe063ecbf7b4","_type":"link","href":"https://astexplorer.net/#/gist/ac4678db738fbe090bf90f5c4e143d6f/2febfc769e5a3feea737e0436a40595779e2db05"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Full working example can be seen "},{"_type":"span","marks":["fe063ecbf7b4"],"text":"here"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Notes"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"When you wish to create a Node, use the "},{"_type":"span","marks":["code"],"text":"camelCase"},{"_type":"span","marks":[],"text":" name, and when you wish to look up a Node use the "},{"_type":"span","marks":["code"],"text":"PascalCase"},{"_type":"span","marks":[],"text":" name. For example, if you wish to find a "},{"_type":"span","marks":["code"],"text":"classDeclaration"},{"_type":"span","marks":[],"text":" you would do:"}]},{"_type":"code","code":"j(file.source) .find(j.ClassDeclaration) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"But if you wanted to create a class you would do:"}]},{"_type":"code","code":"const classDeclaration = j.classDeclaration(...) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Voil√† we have a simple transform!!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for following along and thanks for reading."}]}]}
{"_type":"post","_createdAt":"2019-02-12T11:38:41.762+00:00","publishedAt":"2019-02-12T11:38:41.762+00:00","title":"FeathersJS Channel Subscriptions","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./channels.jpg","alt":"null"}}]},{"_type":"block","markDefs":[{"_key":"e36b8157803a","_type":"link","href":"https://feathersjs.com/"}],"style":"normal","children":[{"_type":"span","marks":["e36b8157803a"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" Channels are a great way to handle real-time data. However, sometimes you might only want certain data on a certain page. For example, you may have a chatroom app which has multiple rooms and you only want to provide data for a room that a user is viewing."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"On the¬†server"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To be able to handle channels on the fly, I am going to configure a custom service which will handle joining and leaving channels."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/635286bc0bc92fbe1b1c23dcbd4b9e98#subscription-service.class.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above snippet custom service class we use the create method to join the channel and the remove method to leave the channel."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Service"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now to configure the service to emit data to the channels, within the "},{"_type":"span","marks":["code"],"text":"*-service.js"},{"_type":"span","marks":[],"text":" file, we can configure a custom publish. This will emit data only to the channels which exist and will filter out the current user. So the user that created the message within the room, won‚Äôt get an¬†"},{"_type":"span","marks":["code"],"text":".on('created')"},{"_type":"span","marks":[],"text":"event when they create a new message, but all other subscribed users will get this."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/eb415c18790142f24659fc1c667fda03#service.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Awesome! Now we are only emitting data to those that want it. Now let‚Äôs take a look at setting up the client."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"The client"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"For our discussion here, I am just going to show a brief example of where you would emit the subscribe/unsubscribe events."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/ef48d9a42bf4a451b0fa88c9908dbf91#message.component.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above example is of a CanJS component. We use "},{"_type":"span","marks":["code"],"text":"connectedCallback"},{"_type":"span","marks":[],"text":" which is a lifecycle hook called after the component‚Äôs element is inserted into the document. This can also return a function which will be used when the component is torn down / removed from the document."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Within the "},{"_type":"span","marks":["code"],"text":"connectedCallback"},{"_type":"span","marks":[],"text":" we can emit the "},{"_type":"span","marks":["code"],"text":"subscribe"},{"_type":"span","marks":[],"text":" event, and in the teardown, we can emit the "},{"_type":"span","marks":["code"],"text":"unsubscribe"},{"_type":"span","marks":[],"text":". When a user navigates to this component it will automatically subscribe the current user to the room, so all messages that are created with this "},{"_type":"span","marks":["code"],"text":"roomId"},{"_type":"span","marks":[],"text":" will be sent to this room channel."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To see how this affects your app, if you open up the network tab in devtools, and select the "},{"_type":"span","marks":["code"],"text":"ws"},{"_type":"span","marks":[],"text":" sub-tab you will see in the frames section all the data transferred to and from your server."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"If the server was configured to publish to the "},{"_type":"span","marks":["code"],"text":"authenticated"},{"_type":"span","marks":[],"text":" channel which would be all logged in users. Every user would see created events for messages and rooms which they are not viewing. This means that the server is sending data to those that aren‚Äôt using it or require it, so we can prevent this by only sending data to those that are subscribed to specific channel."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-12-18T14:59:44.067+00:00","publishedAt":"2018-12-18T14:59:44.067+00:00","title":"CanJS & FeathersJS Channels","body":[{"_type":"block","markDefs":[{"_key":"b69ca99d711a","_type":"link","href":"https://canjs.com/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I recently wrote an article about how to use "},{"_type":"span","marks":["code"],"text":"FeathersJS‚Äôs"},{"_type":"span","marks":[],"text":" channels to ensure the right realtime data goes to the correct user(s). I want to show how to do the same realtime fun but using "},{"_type":"span","marks":["b69ca99d711a"],"text":"CanJS"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I‚Äôll refer to this article on how to setup the "},{"_type":"span","marks":["code"],"text":"FeatherJS"},{"_type":"span","marks":[],"text":" channels:"}]},{"_type":"block","markDefs":[{"_key":"720bcf11b352","_type":"link","href":"https://blog.feathersjs.com/feathersjs-channels-vuex-7548fb5c5d2c"}],"style":"normal","children":[{"_type":"span","marks":["720bcf11b352","strong"],"text":"FeathersJS, Channels & Vuex"}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Getting setup with¬†CanJS"}]},{"_type":"block","markDefs":[{"_key":"0da14a8158bf","_type":"link","href":"https://github.com/canjs/stealjs-example"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I cloned this "},{"_type":"span","marks":["0da14a8158bf"],"text":"repo"},{"_type":"span","marks":[],"text":" to get started."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let‚Äôs start at setting up the models so we can load the data and get the realtime goodness. We will first need to create a "},{"_type":"span","marks":["code"],"text":"feathersConnection"},{"_type":"span","marks":[],"text":" which is a set of custom "},{"_type":"span","marks":["code"],"text":"can-connect"},{"_type":"span","marks":[],"text":" behaviours."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/a8ce5fae0d342aedcf91c0117246423a#feathers-connection.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above will be used for models to fetch data and keep the model up to date with realtime data. This will also handle combining multiple requests into a single request and a few other cool things."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"There is a similar one needed for authentication"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/d62b3f9c47309051b9466de5d52626d1#feathers-authentication.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This will handle logging in and getting a user object once logged in."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Models"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The user model we can setup using the above "},{"_type":"span","marks":["code"],"text":"feathers-connection"},{"_type":"span","marks":[],"text":" like so:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/602bfb5e642c36896516abd5f745b24f?file=user-model.js&highlights=6-13,15,34-41"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We define the properties on "},{"_type":"span","marks":["code"],"text":"L6-L13"},{"_type":"span","marks":[],"text":" and on "},{"_type":"span","marks":["code"],"text":"L15"},{"_type":"span","marks":[],"text":" we create a reactive list with each list item being an instance of User. The list itself has some computed properties, so we can get "},{"_type":"span","marks":["code"],"text":"usersById"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"usersByEmail"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"On "},{"_type":"span","marks":["code"],"text":"L34-L41"},{"_type":"span","marks":[],"text":" we setup the connection details for this model which tells it how to get data. We pass it the feathers-service we want it to use to fetch data."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The session / authentication model is similar but it uses "},{"_type":"span","marks":["code"],"text":"feathers-authentication"},{"_type":"span","marks":[],"text":" to create the connection:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/f991a6bcba93bb4870b2afd9355da2ff#session-model.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We create a "},{"_type":"span","marks":["code"],"text":"userPromise"},{"_type":"span","marks":[],"text":" async getter, which will load the user if the "},{"_type":"span","marks":["code"],"text":"userId"},{"_type":"span","marks":[],"text":" exists, this will allow us within the "},{"_type":"span","marks":["code"],"text":"user"},{"_type":"span","marks":[],"text":" prop to load in a user, which will be an instance of the "},{"_type":"span","marks":["code"],"text":"User"},{"_type":"span","marks":[],"text":" model we defined earlier."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Finally we create a "},{"_type":"span","marks":["code"],"text":"message"},{"_type":"span","marks":[],"text":" model which will handle loading in message data."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/edc7ee41470d3b700c6be2fc85f17bed#messages-model.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We are using "},{"_type":"span","marks":["code"],"text":"[can-query-logic](https://canjs.com/doc/can-query-logic.html)"},{"_type":"span","marks":[],"text":" along with "},{"_type":"span","marks":["code"],"text":"feathers-query-logic"},{"_type":"span","marks":[],"text":" to handle converting feathers queries into a query format that "},{"_type":"span","marks":["code"],"text":"can-connect"},{"_type":"span","marks":[],"text":" can use to query data."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Getting the¬†data"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"So far we have discussed getting the models setup so we can load in data, let‚Äôs see how that‚Äôs done within a component."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/498d06e2679baaf4cc9c698a32fc2697#message-list--vm.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above is the "},{"_type":"span","marks":["code"],"text":"ViewModel"},{"_type":"span","marks":[],"text":" for the "},{"_type":"span","marks":["code"],"text":"MessageList"},{"_type":"span","marks":[],"text":" component. We create a "},{"_type":"span","marks":["code"],"text":"usersPromise"},{"_type":"span","marks":[],"text":" and a "},{"_type":"span","marks":["code"],"text":"messagesPromise"},{"_type":"span","marks":[],"text":" which will load in the initial messages and users for the page load. We need the users so we can map the email within the message to the users name."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We create a "},{"_type":"span","marks":["code"],"text":"getter"},{"_type":"span","marks":[],"text":" which will "},{"_type":"span","marks":["code"],"text":"Promise.all"},{"_type":"span","marks":[],"text":" both queries so we can load them both before rendering the list of messages. Using the "},{"_type":"span","marks":["code"],"text":"connectedCallback"},{"_type":"span","marks":[],"text":" lifecycle method of the "},{"_type":"span","marks":["code"],"text":"ViewModel"},{"_type":"span","marks":[],"text":" we create a "},{"_type":"span","marks":["code"],"text":"listenTo"},{"_type":"span","marks":[],"text":" event listener, which will fire once a property changes. Once the current user is present on the "},{"_type":"span","marks":["code"],"text":"ViewModel"},{"_type":"span","marks":[],"text":" we can then load the initial data."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now that we have the initial data loaded, we can render this within the template. When we create new data or retrieve new data via "},{"_type":"span","marks":["code"],"text":"sockets"},{"_type":"span","marks":[],"text":" the "},{"_type":"span","marks":["code"],"text":"Message"},{"_type":"span","marks":[],"text":" model‚Äôs list will automatically be updated, and the data will update within the template!"}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Creating new¬†messages"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We can call "},{"_type":"span","marks":["code"],"text":"new Message({ ...data })"},{"_type":"span","marks":[],"text":" to create a new instance, and calling¬†"},{"_type":"span","marks":["code"],"text":".save()"},{"_type":"span","marks":[],"text":" will send this to the server and update our "},{"_type":"span","marks":["code"],"text":"Message.List"},{"_type":"span","marks":[],"text":". As this is a promise, we can¬†"},{"_type":"span","marks":["code"],"text":".then"},{"_type":"span","marks":[],"text":" to reset the input bindings so the form is clear for another message."}]},{"_type":"code","code":"new Message({ to: this.to, message: this.msg }) .save() .then(() => { this.to = '' this.msg = '' }) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./realtime.gif","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You can see the full repo here:"}]},{"_type":"block","markDefs":[{"_key":"baf0643822b6","_type":"link","href":"https://github.com/Mattchewone/realtime-canjs"}],"style":"normal","children":[{"_type":"span","marks":["baf0643822b6","strong"],"text":"Mattchewone/realtime-canjs"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2019-02-25T15:20:14.899+00:00","publishedAt":"2019-02-25T15:20:14.899+00:00","title":"FeathersJS Emitting","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./typewriter.jpg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"FeathersJS makes it really easy to write realtime web API‚Äôs. I want to talk about how you can emit data from your hooks. I had an application which had two services "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"group-access"},{"_type":"span","marks":[],"text":"¬†, a user could only fetch items from "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" if they had a record in the "},{"_type":"span","marks":["code"],"text":"group-access"},{"_type":"span","marks":[],"text":" collection."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"But what this meant was when a user was granted access via the "},{"_type":"span","marks":["code"],"text":"group-access"},{"_type":"span","marks":[],"text":" service they would have to reload the page in order to re-fetch "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" to reflect the new access."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/467eaca2190fbcc3fce743889be1b1c4#hooks.js"}]},{"_type":"block","markDefs":[{"_key":"3fb457c87663","_type":"link","href":"https://docs.feathersjs.com/api/hooks.html#registering-hooks"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above snippet is for an "},{"_type":"span","marks":["3fb457c87663"],"text":"after create hook"},{"_type":"span","marks":[],"text":", this would be for the "},{"_type":"span","marks":["code"],"text":"group-access"},{"_type":"span","marks":[],"text":" service. When a new "},{"_type":"span","marks":["code"],"text":"group-access"},{"_type":"span","marks":[],"text":" record is created this hook will run and will load the group via a "},{"_type":"span","marks":["code"],"text":"get"},{"_type":"span","marks":[],"text":", so we can emit this record. We then "},{"_type":"span","marks":["code"],"text":"emit"},{"_type":"span","marks":[],"text":" on the "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" service and use the "},{"_type":"span","marks":["code"],"text":"created"},{"_type":"span","marks":[],"text":" event name. We clone the "},{"_type":"span","marks":["code"],"text":"context"},{"_type":"span","marks":[],"text":" and add some additional params so that we can use these within the "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" publish function."}]},{"_type":"block","style":"blockquote","markDefs":[],"children":[{"_type":"span","marks":[],"text":"Be sure to update the "},{"_type":"span","marks":["code"],"text":"path"},{"_type":"span","marks":[],"text":" so that it will emit using that path / service name."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/c3ae7b57b6b928a982dcd29f02bbdccd#service.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above publish snippet, we are only going to publish realtime data if we have come from an internal "},{"_type":"span","marks":["code"],"text":"emit"},{"_type":"span","marks":[],"text":", we can verify this by checking the property we added to the context in the "},{"_type":"span","marks":["code"],"text":"emit"},{"_type":"span","marks":[],"text":" call. In a real app you would probably be emitting based on some other checks."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"What this will do is filter all the channels to only that of "},{"_type":"span","marks":["code"],"text":"context.userId"},{"_type":"span","marks":[],"text":" which was passed in by the custom "},{"_type":"span","marks":["code"],"text":"emit"},{"_type":"span","marks":[],"text":". It will "},{"_type":"span","marks":["code"],"text":"send"},{"_type":"span","marks":[],"text":" that "},{"_type":"span","marks":["code"],"text":"data"},{"_type":"span","marks":[],"text":" to the channel."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"If you are using something like "},{"_type":"span","marks":["code"],"text":"can-connect-feathers"},{"_type":"span","marks":[],"text":" or "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" when a realtime "},{"_type":"span","marks":["code"],"text":"created"},{"_type":"span","marks":[],"text":" event happens the created item will be added to the list of "},{"_type":"span","marks":["code"],"text":"groups"},{"_type":"span","marks":[],"text":" and should be displayed automagically."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This should be done the same for the "},{"_type":"span","marks":["code"],"text":"removed"},{"_type":"span","marks":[],"text":" event, so when a "},{"_type":"span","marks":["code"],"text":"groups-access"},{"_type":"span","marks":[],"text":" record is deleted, as such revoking the user access. We can "},{"_type":"span","marks":["code"],"text":"emit"},{"_type":"span","marks":[],"text":" a "},{"_type":"span","marks":["code"],"text":"removed"},{"_type":"span","marks":[],"text":" event, which if configured the client will be listening for, thus removing the record from the list."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-10-17T20:37:53.772+01:00","publishedAt":"2018-10-17T20:37:53.772+01:00","title":"CanJS modlet pattern","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./code.jpeg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have recently started working at Bitovi which created and continually develop CanJS which is a modern Javascript framework. I have previously been using Vue for projects, so in my efforts in learning a new framework, I am making articles to aid in my learning and sharing what I learn."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Modlets and what are¬†they?"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Well, you can think of modlets as modules, it‚Äôs simply an organized way to structure your files. Each folder is a modlet and will contain all the parts involved with using and testing that component. The default structure for a modlet is to contain:"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"ViewModel"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"Template"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"Tests"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"Styles"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"Demo page"}]},{"_type":"block","markDefs":[],"style":"normal","level":1,"listItem":"bullet","children":[{"_type":"span","marks":[],"text":"Component documentation"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is a bit different to how "},{"_type":"span","marks":["code"],"text":"Vue"},{"_type":"span","marks":[],"text":" projects tend to be structured, where components are either grouped by type within the "},{"_type":"span","marks":["code"],"text":"components"},{"_type":"span","marks":[],"text":" folder or all just placed at the root of the "},{"_type":"span","marks":["code"],"text":"components"},{"_type":"span","marks":[],"text":" folder."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Demo page"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Having a demo page and being able to develop a component in isolation has been extremely helpful when working on large projects with lots of components. The demo page allows you to mock any props for the component so you can pass data into the component as it would be when used in the app."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You are able to interact with and use the component to ensure everything is working as you expect it to. Running the demo page is as simple as starting a "},{"_type":"span","marks":["code"],"text":"http-server"},{"_type":"span","marks":[],"text":" and loading the components¬†"},{"_type":"span","marks":["code"],"text":".html"},{"_type":"span","marks":[],"text":" file."}]},{"_type":"block","markDefs":[{"_key":"2c5e3b75747d","_type":"link","href":"https://donejs.com/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"The "},{"_type":"span","marks":["2c5e3b75747d"],"text":"DoneJS"},{"_type":"span","marks":[],"text":" cli allows you to scaffold an app quickly and can be used to create the component in the modlet pattern."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Examples"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have put together a very basic "},{"_type":"span","marks":["code"],"text":"CanJS"},{"_type":"span","marks":[],"text":" app which you can see here:"}]},{"_type":"block","markDefs":[{"_key":"23eecf2f01ef","_type":"link","href":"https://github.com/Mattchewone/canjs-demo"}],"style":"normal","children":[{"_type":"span","marks":["23eecf2f01ef","strong"],"text":"Mattchewone/canjs-demo"}]},{"_type":"block","markDefs":[{"_key":"a377e1912aec","_type":"link","href":"https://www.bitovi.com/blog/canjs-5"}],"style":"normal","children":[{"_type":"span","marks":["a377e1912aec","strong"],"text":"CanJS 5.0"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-01-13T09:00:00.000+00:00","publishedAt":"2020-01-13T09:00:00.000+00:00","title":"FeathersJS REST queries with null","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./image.jpg","alt":"null"}}]},{"_type":"block","markDefs":[{"_key":"17f56b5c8594","_type":"link","href":"https://feathersjs.com/"},{"_key":"459306e90dc7","_type":"link","href":"https://socket.io/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have been working on a "},{"_type":"span","marks":["17f56b5c8594"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" project which was using "},{"_type":"span","marks":["459306e90dc7"],"text":"realtime"},{"_type":"span","marks":[],"text":" on the web client, during a performance review we had been looking at what can be removed that wasn't necessary in order to reduce the core / vendor bundle sizes. As realtime wasn't being used for any realtime messages or updates this was a relatively obvious place to look."}]},{"_type":"block","markDefs":[{"_key":"0a56fe0624b8","_type":"link","href":"https://vuejs.org/v2/guide/ssr.html"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Having been using FeathersJS for a number of years now I thought that this would be a relatively straight forward change, even though I had yet to swap client transports on a project myself and had in fact been using realtime for the majority of the projects I have been involved in. The code change itself was as expected pretty simple, install the new client libraries for REST and install "},{"_type":"span","marks":["code"],"text":"node-fetch"},{"_type":"span","marks":[],"text":" as this was a "},{"_type":"span","marks":["0a56fe0624b8"],"text":"Server Side Rendered"},{"_type":"span","marks":[],"text":" application."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"The problems begin"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"However after restarting the application and visiting a few pages locally it became apparant that something wasn't right. Pages were not loading properly, so I began to investigate."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Array issues"}]},{"_type":"block","markDefs":[{"_key":"31cf87b9dd08","_type":"link","href":"https://github.com/feathersjs-ecosystem/feathers-sequelize#associations"},{"_key":"d858fa9a2072","_type":"link","href":"https://www.npmjs.com/package/qs"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"We had quite complex queries which had lots of deeply nested parameters which would then be used within a hook to make "},{"_type":"span","marks":["31cf87b9dd08"],"text":"associations"},{"_type":"span","marks":[],"text":" which worked perfectly fine with websocket queries, but was totally broken when using REST. After looking into how FeathersJS parses the query string I found that it was using the "},{"_type":"span","marks":["d858fa9a2072"],"text":"querystring"},{"_type":"span","marks":[],"text":" package which had an option to increase how deep it would parse an nested string. It will by default only parse up to 5 children deep, which was a problem as we had queries which went deeper. This is what would happen if you had a query with more than 5 children deep:"}]},{"_type":"code","code":"const input = 'a[b][c][d][e][f][g][h][i]=j' const output = { a: { b: { c: { d: { e: { f: { '[g][h][i]': 'j' } } } } } } } ","language":"js"},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Array solution"}]},{"_type":"block","markDefs":[{"_key":"ee2bf0da5436","_type":"link","href":"https://docs.feathersjs.com/help/faq.html#why-are-queries-with-arrays-failing"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"The solution is highlighted within "},{"_type":"span","marks":["ee2bf0da5436"],"text":"faqs"},{"_type":"span","marks":[],"text":" whereby you can set a custom "},{"_type":"span","marks":["code"],"text":"qs"},{"_type":"span","marks":[],"text":" instance with your own options. This allows you to customise how deep you would like the querystring to be parsed:"}]},{"_type":"code","code":"// Update limits for `qs` to allow for deeper // parsing of objects specifically from REST app.set('query parser', function (str) { return qs.parse(str, { arrayLimit: 100, depth: 20, parameterLimit: 2000 }); }); ","language":"js"},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"null issue"}]},{"_type":"block","markDefs":[{"_key":"6ef0a089c138","_type":"link","href":"https://docs.feathersjs.com/help/faq.html#my-queries-with-null-values-aren-t-working"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"The next issue which also appears within the "},{"_type":"span","marks":["6ef0a089c138"],"text":"faqs"},{"_type":"span","marks":[],"text":" is that a "},{"_type":"span","marks":["code"],"text":"null"},{"_type":"span","marks":[],"text":" value when in a query being sent via REST is not being handled correctly, it will appear as an empty string. This doesn't work when using "},{"_type":"span","marks":["code"],"text":"Sequelize"},{"_type":"span","marks":[],"text":" with "},{"_type":"span","marks":["code"],"text":"postgres"},{"_type":"span","marks":[],"text":" as a "},{"_type":"span","marks":["code"],"text":"null"},{"_type":"span","marks":[],"text":" value would typically be turned into a "},{"_type":"span","marks":["code"],"text":"'property' is not null"},{"_type":"span","marks":[],"text":" query, which ends up being "},{"_type":"span","marks":["code"],"text":"'property' != ''"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"null solution"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In order for "},{"_type":"span","marks":["code"],"text":"null"},{"_type":"span","marks":[],"text":" to be handled correctly we must look through the "},{"_type":"span","marks":["code"],"text":"qs"},{"_type":"span","marks":[],"text":" library API documentation. We can see that there is an option to allow for "},{"_type":"span","marks":["code"],"text":"strictNullHandling"},{"_type":"span","marks":[],"text":" which we can add to the server's "},{"_type":"span","marks":["code"],"text":"query parser"},{"_type":"span","marks":[],"text":" like we set above."}]},{"_type":"code","code":"// Allow for strict null handling app.set('query parser', function (str) { return qs.parse(str, { arrayLimit: 100, depth: 20, parameterLimit: 2000, strictNullHandling: true }); }); ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The issue now is how do we set how the "},{"_type":"span","marks":["code"],"text":"qs"},{"_type":"span","marks":[],"text":" library behaves on the client when it calls "},{"_type":"span","marks":["code"],"text":"qs.stringify"},{"_type":"span","marks":[],"text":" on the query object? Well currently this isn't possible, there isn't a way to be able to pass options to the "},{"_type":"span","marks":["code"],"text":"qs.stringify"},{"_type":"span","marks":[],"text":" through FeathersJS rest-client, nor is there a way that will allow you to extend and customise how the querystring is created."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"But fear not, for I have a PR which will remedy this issue. I had originally created a PR for the ability to add options to this effect, but after a short discussion and additional information from David the core developer on FeathersJS it was decided that allowing extensibility was favoured over options, so a new PR was made to make this possible. It will allow the following to be possible:"}]},{"_type":"code","code":"import feathers from '@feathersjs/feathers' import rest from '@feathersjs/rest-client' import { FetchClient } from '@feathersjs/rest-client' import qs from 'qs' const app = feathers() ‚Äã class MyFetchClient extends FetchClient { getQuery (query) { if (Object.keys(query).length !== 0) { const queryString = qs.stringify(query, { strictNullHandling: true }) return `?${queryString}` } return '' } } ‚Äã // Configure API url const restClient = rest('https://feathers-api.com') ‚Äã // Configure rest client app.configure(restClient.fetch(window.fetch, MyFetchClient)) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"With of these changes in places this allows for a much smoother transition between REST and realtime web clients for a FeathersJS API."}]}]}
{"_type":"post","_createdAt":"2020-02-04T09:00:00.000+00:00","publishedAt":"2020-02-04T09:00:00.000+00:00","title":"FeathersJS Transport & Auth Configuration Order","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./hector-j-rivas-87hFrPk3V-s-unsplash.jpg","alt":"null"}}]},{"_type":"block","style":"blockquote","markDefs":[],"children":[{"_type":"span","marks":[],"text":"Related to Version 3 of FeathersJS"}]},{"_type":"block","markDefs":[{"_key":"fa9c9e8944d0","_type":"link","href":"https://docs.feathersjs.com/api/client.html"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I was working on a project which was using the "},{"_type":"span","marks":["fa9c9e8944d0"],"text":"feathers-client"},{"_type":"span","marks":[],"text":" with SocketIO transport and we were switching to using REST transport. The project was using Nuxt and the authentication was being done on the client / browser so it was not doing any authentication during the Server Side Rendering (SSR). When I switched to using the REST transport I noticed that auth was no longer working, all the non-auth services were working but the services that required auth were throwing not-authenticated errors."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"It took me a little while to realise what was going on. I had to dig through the source code a little to find out why auth was not working. This was the setup that I had for the "},{"_type":"span","marks":["code"],"text":"feathers-client.js"},{"_type":"span","marks":[],"text":" file:"}]},{"_type":"code","code":"const feathers = require('@feathersjs/feathers') const rest = require('@feathersjs/rest-client') const auth = require('@feathersjs/authentication-client') const fetch = require('node-fetch') const restClient = rest('https://my-server.com') module.exports = feathers() .configure(auth()) .configure(restClient.fetch(fetch)) ","language":"js"},{"_type":"block","style":"blockquote","markDefs":[],"children":[{"_type":"span","marks":[],"text":"Can you see from that what might cause auth to not work?"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"It took me a little while too, turns out the order of the auth and transport configurations matters."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"When the authentication client is set up there is a hook which populates the header and it depends on the the transport already having been configured. This doesn't matter for the Socket transport, it's only an issue for REST as this requires the token to be added to the headers so that the REST library can add this to the request."}]},{"_type":"code","code":"if (app.rest && accessToken) { const { scheme, header } = authentication.options; const authHeader = `${scheme} ${accessToken}`; context.params.headers = Object.assign({}, { [header]: authHeader }, context.params.headers); } ","language":"js"},{"_type":"block","markDefs":[{"_key":"904e58d2b758","_type":"link","href":"https://github.com/feathersjs/feathers/blob/master/packages/authentication-client/src/hooks/populate-header.ts#L9-L16"}],"style":"normal","children":[{"_type":"span","marks":["904e58d2b758"],"text":"Source"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To ensure that auth works for REST, add the REST configuration before the auth module:"}]},{"_type":"code","code":"const feathers = require('@feathersjs/feathers') const rest = require('@feathersjs/rest-client') const auth = require('@feathersjs/authentication-client') const fetch = require('node-fetch') const restClient = rest('https://my-server.com') module.exports = feathers() .configure(restClient.fetch(fetch)) .configure(auth()) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-04-26T13:25:10.664+01:00","publishedAt":"2018-04-26T13:25:10.664+01:00","title":"FeathersJS deployment - Gitlab CI/CD - Heroku","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./image.jpg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Deploying FeathersJS apps with Gitlab couldn‚Äôt be easier with the integrated CI/CD process. Here is how I am deploying to Heroku for staging enviroments. This is my¬†"},{"_type":"span","marks":["code"],"text":".gitlab-ci.yml"},{"_type":"span","marks":[],"text":" file in the root of my project."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/5e067b4698ad88ae56619ac4fbfbdc1c#.gitlab-ci.yml"}]},{"_type":"block","markDefs":[{"_key":"82392809c330","_type":"link","href":"https://gitlab.com/help/ci/variables/README#secret-variables"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Log in to Gitlab and set up some CI/CD "},{"_type":"span","marks":["82392809c330"],"text":"secrets"},{"_type":"span","marks":[],"text":" which contain your "},{"_type":"span","marks":["code"],"text":"HEROKU_APP"},{"_type":"span","marks":[],"text":" which is the name of the app within Heroku, and your "},{"_type":"span","marks":["code"],"text":"HEROKU_CI_API_KEY"},{"_type":"span","marks":[],"text":" which is your key used for deploying."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Create an app within Heroku with the same name as "},{"_type":"span","marks":["code"],"text":"HEROKU_NAME"},{"_type":"span","marks":[],"text":" if you have not already done so."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Push to your development branch and you should see the two stages within your pipeline, one for tests and one for deployment. Assuming your tests pass then your app should be deployed to Heroku."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"If you see anything that is wrong or can be improved please get in touch."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-12-07T00:15:57.902+00:00","publishedAt":"2018-12-07T00:15:57.902+00:00","title":"FeathersJS, Channels & Vuex","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I wanted to share a little demo app that I put together which shows the use of channels for filtering realtime data and seeing that data being updated live within your application using "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have been using "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" for a little while now, but I haven‚Äôt gotten round to using channels until now, and I think they are great and I wanted to share some of my learnings. This is a relatively basic walkthrough and I don‚Äôt cover any advanced usages but should be helpful to give you a starting point."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"What this short walk through will show is how you can send data to specific channel(s), so data is only being received by the correct user(s). We will also see how "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" will subscribe to the socket events and keep your data updated."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Setting up¬†channels"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I will start with the default "},{"_type":"span","marks":["code"],"text":"channels.js"},{"_type":"span","marks":[],"text":" file that comes out of the box with "},{"_type":"span","marks":["code"],"text":"FeathersJS"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Here I have added a "},{"_type":"span","marks":["code"],"text":"userId"},{"_type":"span","marks":[],"text":" channel that the user will join upon login. The app can then use this channel to publish data. By default as you can see on line #37 the app will publish all data to the authenticated channel, which is all logged in users."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/70b46bcdb0a66de03740f0d6d478d9cb#messages.service.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above "},{"_type":"span","marks":["code"],"text":"messages.service.js"},{"_type":"span","marks":[],"text":" file we create a "},{"_type":"span","marks":["code"],"text":"service.publish"},{"_type":"span","marks":[],"text":" function to only publish data to the channel with the userId. So only the user who is being sent a message will receive the realtime socket data."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"The Client"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now we have the server setup with channels, let‚Äôs get the "},{"_type":"span","marks":["code"],"text":"vue"},{"_type":"span","marks":[],"text":" client ready. For this demo I am using a simple "},{"_type":"span","marks":["code"],"text":"vue"},{"_type":"span","marks":[],"text":" app setup using the "},{"_type":"span","marks":["code"],"text":"@vue/cli"},{"_type":"span","marks":[],"text":", I then installed the following additional modules:"}]},{"_type":"code","code":"npm i vuex vue-router feathers-vuex @feathersjs/authentication-client @feathersjs/feathers @feathersjs/socketio-client socket.io-client ","language":"bash"},{"_type":"block","markDefs":[{"_key":"0987a078b0e9","_type":"link","href":"https://blog.feathersjs.com/vue-authentication-with-feathersjs-3b1bdc6f5898"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I won‚Äôt go into too much detail about the routing and "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" setup, as I‚Äôve touched on getting it setup here ‚Äî "},{"_type":"span","marks":["0987a078b0e9"],"text":"https://blog.feathersjs.com/vue-authentication-with-feathersjs-3b1bdc6f5898"}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Getting the¬†data"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let‚Äôs talk about how we get the data from the server initially. We first need to load any data that the server already has so we can show any previous messages."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/a3fb09fa0323468658a14f61b669af28#Message--actions.vue"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We use "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" find method that we alias to "},{"_type":"span","marks":["code"],"text":"findMessages"},{"_type":"span","marks":[],"text":" with this we can pass it a "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" query and here we are wanting to only get messages that we have either received or sent. This will populate the data into the "},{"_type":"span","marks":["code"],"text":"vuex"},{"_type":"span","marks":[],"text":" store. We could access the data in a¬†"},{"_type":"span","marks":["code"],"text":".then"},{"_type":"span","marks":[],"text":" from "},{"_type":"span","marks":["code"],"text":"findMessages"},{"_type":"span","marks":[],"text":" and add the data to the component. But for this demo I am going to use "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":["code"],"text":"find"},{"_type":"span","marks":[],"text":" getter to read the data from the store."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/cf6de6ca7b4c5329d57b8d52cd9da150#Message--getters.vue"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Similar to the "},{"_type":"span","marks":["code"],"text":"find"},{"_type":"span","marks":[],"text":" action, we are going to query the "},{"_type":"span","marks":["code"],"text":"vuex"},{"_type":"span","marks":[],"text":" store with a "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" query. We create a "},{"_type":"span","marks":["code"],"text":"messages"},{"_type":"span","marks":[],"text":" computed prop which will query the store and contain the "},{"_type":"span","marks":["code"],"text":"reactive"},{"_type":"span","marks":[],"text":" data. When the service for "},{"_type":"span","marks":["code"],"text":"messages"},{"_type":"span","marks":[],"text":" receives an¬†"},{"_type":"span","marks":["code"],"text":".on('created')"},{"_type":"span","marks":[],"text":" or¬†"},{"_type":"span","marks":["code"],"text":".on('updated')"},{"_type":"span","marks":[],"text":" it will automatically update the "},{"_type":"span","marks":["code"],"text":"vuex"},{"_type":"span","marks":[],"text":" store, and because the store is reactive, provided the data that has been received matches the query we used in "},{"_type":"span","marks":["code"],"text":"findMessagesInStore"},{"_type":"span","marks":[],"text":" the data on page will be updated."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Model instances"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" when setting up our service in the "},{"_type":"span","marks":["code"],"text":"vuex"},{"_type":"span","marks":[],"text":" store, creates a Model instance for use to be able to use to create new data and update / remove that data. I will use this method for creating messages:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/d39ddeae174c6652b93ce5170446b7df#Message--create.vue"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"When we setup "},{"_type":"span","marks":["code"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" we used the "},{"_type":"span","marks":["code"],"text":"FeathersVuex"},{"_type":"span","marks":["code"],"text":"vue"},{"_type":"span","marks":[],"text":" plugin, which gives us access to the global "},{"_type":"span","marks":["code"],"text":"$FeathersVuex"},{"_type":"span","marks":[],"text":" which has a Model name for each of our services, as my service was called "},{"_type":"span","marks":["code"],"text":"messages"},{"_type":"span","marks":[],"text":" I have access to "},{"_type":"span","marks":["code"],"text":"Message"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I can pass in the data I want to be saved and call¬†"},{"_type":"span","marks":["code"],"text":".save"},{"_type":"span","marks":[],"text":" and this will save the record and add that into the current store. "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" will create the record and will publish the data in realtime to the user which we added in "},{"_type":"span","marks":["code"],"text":"to"},{"_type":"span","marks":[],"text":" of the data."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You should be able to see this if you open two browsers for example Chrome and Firefox. If you login with UserA in Chrome and UserB in Firefox, you will be able to send messages between UserA and UserB. If you open a third browser for example Chrome in incognito mode and login with UserC you will see that UserC does not get any messages which have not been sent to this user directly."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./realtime.gif","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Here is the repo"}]},{"_type":"block","markDefs":[{"_key":"5b87457cacb9","_type":"link","href":"https://github.com/Mattchewone/realtime-vuex"}],"style":"normal","children":[{"_type":"span","marks":["5b87457cacb9","strong"],"text":"Mattchewone/realtime-vuex"}]},{"_type":"block","markDefs":[{"_key":"c10f44e0113d","_type":"link","href":"posts/canjs-feathersjs-channels"}],"style":"normal","children":[{"_type":"span","marks":["c10f44e0113d","strong"],"text":"CanJS & FeathersJS Channels"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-02-19T09:00:00.000+00:00","publishedAt":"2020-02-19T09:00:00.000+00:00","title":"FeathersJS Customise Local Auth Strategy","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./marcos-mayer-8_NI1WTqCGY-unsplash.jpg","alt":"null"}}]},{"_type":"block","markDefs":[{"_key":"fceceb4771a2","_type":"link","href":"http://slack.feathersjs.com/"},{"_key":"6074d28cb212","_type":"link","href":"https://docs.feathersjs.com/api/authentication/local.html"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I often see people in the "},{"_type":"span","marks":["fceceb4771a2"],"text":"FeathersJS community"},{"_type":"span","marks":[],"text":" asking how they can customize the LocalAuth to implement some additional user verifications and throw their errors. I thought I would walk through how easy it is in v4 to do this by extending the "},{"_type":"span","marks":["6074d28cb212"],"text":"LocalStrategy"},{"_type":"span","marks":[],"text":". The "},{"_type":"span","marks":["code"],"text":"LocalStrategy"},{"_type":"span","marks":[],"text":" refers to the auth strategy which is used for a "},{"_type":"span","marks":["code"],"text":"username/email & password"},{"_type":"span","marks":[],"text":" authentication, as opposed to "},{"_type":"span","marks":["code"],"text":"JWT"},{"_type":"span","marks":[],"text":" or "},{"_type":"span","marks":["code"],"text":"OAuth"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"By default, the "},{"_type":"span","marks":["code"],"text":"LocalStrategy"},{"_type":"span","marks":[],"text":" will verify the username/email and password combination. It will throw an error if the password and username/email combination do not match. But sometimes you may want to do more than verify the username/email & password."}]},{"_type":"block","markDefs":[{"_key":"d251f97d1558","_type":"link","href":"https://docs.feathersjs.com/api/authentication/local.html#customization"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"As the "},{"_type":"span","marks":["d251f97d1558"],"text":"documentation"},{"_type":"span","marks":[],"text":" shows, you can customize how the user is looked up so that you can restrict to only "},{"_type":"span","marks":["code"],"text":"active"},{"_type":"span","marks":[],"text":" users:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/a4f898f0e0f6dbe27bbe54a0f186c6f9#local-get-entity.js"}]},{"_type":"block","markDefs":[{"_key":"81ad6c988883","_type":"link","href":"https://docs.feathersjs.com/api/authentication/local.html#configuration"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above snippet, we can see that to create our custom strategy we extend the "},{"_type":"span","marks":["code"],"text":"LocalStrategy"},{"_type":"span","marks":[],"text":" and overwrite the "},{"_type":"span","marks":["code"],"text":"getEntityQuery"},{"_type":"span","marks":[],"text":" which is used to do the email lookup. This should either return a valid user which will then be used to compare passwords or return no users which will by default throw a "},{"_type":"span","marks":["code"],"text":"NotAuthenticated"},{"_type":"span","marks":[],"text":" error. You can change the message of the error by configuration which can be found "},{"_type":"span","marks":["81ad6c988883"],"text":"here"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To extend it even further, we might want to throw a different error or a custom error then we can do the following:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/a4f898f0e0f6dbe27bbe54a0f186c6f9#authentication.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"What we can do is extend the "},{"_type":"span","marks":["code"],"text":"findEntity"},{"_type":"span","marks":[],"text":" method. We will need to call the "},{"_type":"span","marks":["code"],"text":"super.findEntity"},{"_type":"span","marks":[],"text":" so that we can use the existing implementation of fetching the user. Then we can check the user that is returned to see whether they are in support of coffee."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Both of the above methods can be used in combination together also!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/a4f898f0e0f6dbe27bbe54a0f186c6f9#combined-auth.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-04-09T10:00:00.000+01:00","publishedAt":"2020-04-09T10:00:00.000+01:00","title":"My First Finite State Machine","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"nihonorway-graphy-nCvi-gS5r88-unsplash.jpg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"\n"},{"_type":"span","marks":["strong","em"],"text":"First of all I hope that everyone is staying safe during this Pandemic!"},{"_type":"span","marks":[],"text":"\n"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Given the current situation, I was involved in a couple of group chats which involved quizzes which had Movie titles described in Emojis. I thought this was quite fun, but what I saw was depending on the size of the group and how available people were, that often people would reply with answers in the group chat which meant that others didn't get a chance to play the whole quiz without seeing the answers and it also meant that you often kept losing track of the questions."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I thought it would be fun to play around with creating a simple quiz game online for this purpose üòÄ."}]},{"_type":"block","markDefs":[{"_key":"85f60585b540","_type":"link","href":"https://quizzes.mattchaffe.uk"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I spun up a Nuxt application, created a Firebase project so I could use the hosting and Firestore services, and then I started to draw out my simple idea (which can be seen online "},{"_type":"span","marks":["85f60585b540"],"text":"here"},{"_type":"span","marks":[],"text":")."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Finite State Machines (FSM)"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I have been hearing a lot about FSM through colleagues and the Twitterverse and thought this would be a good opportunity for me to dip my toe in and try one out."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"What are Finite State Machines"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let's start at the beginning to see what FSMs are and how they can be useful. An FSM is a way to describe a finite number of states in which the application can be in exactly one of at any given time. This means that I can describe all the states that my application could be in and I can be sure that it will only be in one of those states."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"How did I create the FSM"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I started with a pretty rough game component which looked similar to the following:"}]},{"_type":"code","code":"<template> <main> <Quiz v-if=\"!completed\" :questions=\"questions\" /> <Results v-if=\"completed && answered\" :results=\"results\" /> </main> </template> ","language":"html"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This might not look too crazy as this application is fairly simple but it does allow for the application to be in a state where if the game is completed but there are no answers the user will see nothing. Easily solvable, sure, but then that's no fun and I want to play with an FSM üòú."}]},{"_type":"block","markDefs":[{"_key":"f3ab398f327d","_type":"link","href":"https://xstate.js.org/docs/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I decided to create my first FSM using "},{"_type":"span","marks":["f3ab398f327d"],"text":"xstate"},{"_type":"span","marks":[],"text":" and the state machine looks similar to this:"}]},{"_type":"code","code":"import { Machine, assign } from 'xstate' const gameMachine = Machine({ id: 'game', initial: 'play', context: { answered: 0, guesses: {} }, states: { play: { on: { RESOLVE: { target: 'results', actions: assign({ answered: (context, event) => event.answered, guesses: (context, event) => event.guesses }) } } }, results: { on: { RESET: 'play' }, initial: 'hide', states: { hide: { on: { TOGGLE: 'show' } }, show: { on: { TOGGLE: 'hide' } } } } } }) ","language":"js"},{"_type":"block","markDefs":[{"_key":"53b22b5ad076","_type":"link","href":"https://xstate.js.org/viz/"}],"style":"normal","children":[{"_type":"span","marks":["em"],"text":"What I found incredibly useful when developing this was the "},{"_type":"span","marks":["em","53b22b5ad076"],"text":"online visualizer"},{"_type":"span","marks":["em"],"text":" which allowed me to toggle through all the states and see it in action."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Breaking this down I have two states "},{"_type":"span","marks":["code"],"text":"play"},{"_type":"span","marks":[],"text":" or "},{"_type":"span","marks":["code"],"text":"results"},{"_type":"span","marks":[],"text":", within "},{"_type":"span","marks":["code"],"text":"results"},{"_type":"span","marks":[],"text":" there are "},{"_type":"span","marks":["em"],"text":"two"},{"_type":"span","marks":[],"text":" child states which allow the user to show/hide the answers. It's pretty simple. The actions within the "},{"_type":"span","marks":["code"],"text":"play"},{"_type":"span","marks":[],"text":" state allow me to send data to the "},{"_type":"span","marks":["code"],"text":"gameMachine"},{"_type":"span","marks":[],"text":" so it can hold additional context. My "},{"_type":"span","marks":["code"],"text":"GameComponent"},{"_type":"span","marks":[],"text":" now looks like:"}]},{"_type":"code","code":"<main> <component :is=\"currentComponent\" :questions=\"questions\" :answers=\"answers\" :answered=\"context.answered\" :guesses=\"context.guesses\" :show-answers=\"current.matches('results.show')\" @answer=\"validate\" @reset=\"send('RESET')\" @toggleAnswers=\"send('TOGGLE')\" /> </main> ","language":"html"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I use Vue's dynamic component to render the component based on which state the machine is in, the components "},{"_type":"span","marks":["code"],"text":"$emit"},{"_type":"span","marks":[],"text":" to the parent component which then sends a signal to the "},{"_type":"span","marks":["code"],"text":"gameMachine"},{"_type":"span","marks":[],"text":" to instruct it to move to the next state. This means that my game can never be in a state where nothing is visible!"}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Using the FSM with Vue"}]},{"_type":"block","markDefs":[{"_key":"6d5ab065a69e","_type":"link","href":"https://xstate.js.org/docs/"},{"_key":"35857aeb23df","_type":"link","href":"https://xstate.js.org/docs/guides/interpretation.html#interpreting-machines"}],"style":"normal","children":[{"_type":"span","marks":["6d5ab065a69e"],"text":"xstate"},{"_type":"span","marks":[],"text":" provides a simple way to use a State Machine with Vue and that is to use a "},{"_type":"span","marks":["35857aeb23df"],"text":"interpreter"},{"_type":"span","marks":[],"text":". This handles things the state transitions, executing events and many more. I would recommend reading up on the docs for the full list of what it does."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To use this within Vue / Nuxt, within your component you will need to import or create your machine (recommend you keep your machines outside of the component so they can be shared/tested in isolation of the component), then start the machine and listen to any state transitions so you can update the state. That's a lot to take in, let's see some code:"}]},{"_type":"code","code":"<template> <div> My Current State {{ current.value }} <button @click=\"toggle()\"> </div> </template> <script> import { Machine, interpret } from 'xstate' const demoMachine = Machine({ id: 'demo', initial: 'hello', context: { answered: 0, guesses: {} }, states: { hello: { on: { TOGGLE: 'goodbye' } }, goodbye: { on: { TOGGLE: 'hello' } } } }) export default { data: () => ({ demoMachine: interpret(demoMachine), current: demoMachine.initialState }), created () { // Start service on component creation this.demoMachine .onTransition((state) => { // Update the current state component data property with the next state this.current = state }) .start() }, methods: { toggle () { this.demoMachine.send('TOGGLE') } } } </script> ","language":"html"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Breaking this down we can see that we set the interpreted machine onto the component's data along with the machine's initialState. Within the "},{"_type":"span","marks":["code"],"text":"created"},{"_type":"span","marks":[],"text":" lifecycle hook we "},{"_type":"span","marks":["code"],"text":"start"},{"_type":"span","marks":[],"text":" the interpreted machine and listen to transitions, within the callback of the transition change we update the components state from the machine."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2019-07-22T10:00:00.000+01:00","publishedAt":"2019-07-22T10:00:00.000+01:00","title":"FizzBuzz coding challenge","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./image.jpg","alt":"Laptop with code"}}]},{"_type":"block","markDefs":[{"_key":"535f82b78015","_type":"link","href":"https://www.youtube.com/watch?v=QPZ0pIK_wsc"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Whilst I was going through my backlog of videos to watch, I watched this "},{"_type":"span","marks":["535f82b78015"],"text":"video"},{"_type":"span","marks":[],"text":" which explains the use of a coding interview question; The FizzBuzz coding interview question. I wanted to have a go at answering the question myself and wanted to share my thought process as I did it."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I stopped the video at around 1:40 as I wanted to go through an answer it myself without seeing the answer within the video."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"My solutions"}]},{"_type":"block","markDefs":[{"_key":"d3878a424530","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"With the above question in mind, my first thought on how to approach this was how to determine the multiples of 3 and 5. What came to mind was the "},{"_type":"span","marks":["d3878a424530"],"text":"modulus/remainder operator"},{"_type":"span","marks":["code"],"text":"%"},{"_type":"span","marks":[],"text":" I knew that multiples of 3 & 5 should retain remainder 0, so this could be used to determine when to output the correct text."}]},{"_type":"block","markDefs":[{"_key":"e2309bb3d381","_type":"link","href":"https://jsfiddle.net/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"To start the challenge I used "},{"_type":"span","marks":["e2309bb3d381"],"text":"jsfiddle"},{"_type":"span","marks":[],"text":" and I created the following as my starting point:"}]},{"_type":"code","code":"function fizzbuzz (num) { return num } for (let i = 1; i <= 100; i++) { console.log(fizzbuzz(i)) } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I then started on my implementation which first looked like this:"}]},{"_type":"code","code":"function fizzbuzz (num) { if (num % 3 === 0 && num % 5 === 0) { return `fizzbuzz` } else if (num % 3 === 0) { return `fizz` } else if (num % 5 === 0) { return `buzz` } return num } for (let i = 1; i <= 100; i++) { console.log(fizzbuzz(i)) } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"First I check if the number is a multiple of 3 & 5 if so I return the combined "},{"_type":"span","marks":["code"],"text":"fizzbuzz"},{"_type":"span","marks":[],"text":" text, I then check if the number is a multiple of either 3 or 5 and output the correct text, falling back to just returning the initial number."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is quite verbose and has a bit of duplication of the checks for the multiples, so I thought I would improve my answer."}]},{"_type":"code","code":"function fizzbuzz (num) { const isFizz = num % 3 === 0 const isBuzz = num % 5 === 0 if (isFizz && isBuzz) { return `fizzbuzz` } else if (isFizz) { return `fizz` } else if (isBuzz) { return `buzz` } return num } for (let i = 1; i <= 100; i++) { console.log(fizzbuzz(i)) } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"So, this is better but still a bit verbose, we have removed the duplicated checks into a single check that can be re-used, but still has the multiple if statement. How can this be reduced and made more concise I thought."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Here is my final solution:"}]},{"_type":"code","code":"function fizzbuzz (num) { const isFizz = num % 3 === 0 const isBuzz = num % 5 === 0 return `${isFizz ? 'fizz' : ''}${isBuzz ? 'buzz' : ''}` || num } for (let i = 1; i <= 100; i++) { console.log(fizzbuzz(i)) } ","language":"js"},{"_type":"block","markDefs":[{"_key":"1baa596261e6","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"},{"_key":"9fce921f0049","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},{"_key":"e1588b6d43f0","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I removed the "},{"_type":"span","marks":["code"],"text":"if statement"},{"_type":"span","marks":[],"text":" in favour of a "},{"_type":"span","marks":["1baa596261e6"],"text":"ternary"},{"_type":"span","marks":[],"text":" within a "},{"_type":"span","marks":["9fce921f0049"],"text":"template literal"},{"_type":"span","marks":[],"text":" which uses a "},{"_type":"span","marks":["e1588b6d43f0"],"text":"short-circuit"},{"_type":"span","marks":[],"text":" operator to fallback to the number. This boils down to creating a string which first checks if the number is a multiple of 3 which will then add the word "},{"_type":"span","marks":["code"],"text":"fizz"},{"_type":"span","marks":[],"text":", then checks if the number is a multiple of 5 which will add the word "},{"_type":"span","marks":["code"],"text":"buzz"},{"_type":"span","marks":[],"text":". Which will account for being either and both, and it will be an empty string if neither of them is truthy in this case the short-circuit operator will evaluate the empty string as falsey and will use the what is on the right hand of the operator which is the initial number."}]}]}
{"_type":"post","_createdAt":"2019-06-05T10:00:00.000+01:00","publishedAt":"2019-06-05T10:00:00.000+01:00","title":"Gatsby Firebase Deployment","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Having recently updated this very site with Gatsby I wanted to set up a basic pipeline with Gitlab to deploy my site when I push changes to the "},{"_type":"span","marks":["code"],"text":"master"},{"_type":"span","marks":[],"text":" branch. This will be beneficial so that if I create another branch, the deploy process won‚Äôt initiate on other branches."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Gitlab CI"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/baa2989a6d38cebe7847391739728c07#.gitlab-ci.yml"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above "},{"_type":"span","marks":["code"],"text":"gist"},{"_type":"span","marks":[],"text":" shows how simple it is to create a basic CI pipeline. Let's break it down a little though. I only have a deploy task, which uses the latest node container image, then using the script section of the job run "},{"_type":"span","marks":["code"],"text":"npm i"},{"_type":"span","marks":[],"text":" to install all the project dependencies. Then we can install some globals, "},{"_type":"span","marks":["code"],"text":"gatsby-cli"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"firebase-tools"},{"_type":"span","marks":[],"text":", these are used to build the static site and for deployment. To create the site files I would run the "},{"_type":"span","marks":["code"],"text":"gatsby build"},{"_type":"span","marks":[],"text":", and set up "},{"_type":"span","marks":["code"],"text":"firebase"},{"_type":"span","marks":[],"text":" to use token authentication. We will come back to this in a minute, and then we run the "},{"_type":"span","marks":["code"],"text":"firebase deploy"},{"_type":"span","marks":[],"text":" to... well... deploy the site."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Firebase Token Auth"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"As we are deploying using CI, we need the deployment to be \"hands off\" and will need to have an authenticated token for the CI to use to access the project and have permission to deploy. Thankfully firebase has a handy way to generate a token for this exact purpose. If you run the following in your terminal, it will open a browser tab and request you grant access to create this token."}]},{"_type":"code","code":"firebase login:ci ","language":"bash"},{"_type":"block","markDefs":[{"_key":"8e6dfd6acb1b","_type":"link","href":"https://gitlab.com/help/ci/variables/README"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Firebase will then provide you with a handy token within your terminal, which can be used within "},{"_type":"span","marks":["8e6dfd6acb1b"],"text":"Gitlab's CI variables"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To use this token we need to add it to Gitlab's Variables for CI/CD, which can be accessed via Settings > CI / CD:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./gitlab-screengrab.png","alt":"Gitlab CI/CD Variables"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You can see that I have two variables, "},{"_type":"span","marks":["code"],"text":"FIREBASE_TOKEN"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"PROJECT_ID"},{"_type":"span","marks":[],"text":", these will be injected by Gitlab into the pipeline."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Once you have added the secrets and created the "},{"_type":"span","marks":["code"],"text":".gitlab-ci.yml"},{"_type":"span","marks":[],"text":" file, push to "},{"_type":"span","marks":["code"],"text":"master"},{"_type":"span","marks":[],"text":" and this should kick off a build and deploy to firebase! Woop!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./gitlab-pipeline.png","alt":"Gitlab pipeline"}}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Create content..."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now you can create your content, commit, push to gitlab and let it deploy whilst you can sit back and enjoy your new article/blog!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Awesome!!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-08-01T16:23:25.534+01:00","publishedAt":"2018-08-01T16:23:25.534+01:00","title":"Gitlab CI/CD Testing Nodejs App","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"If you are planning to deploy your app via CI/CD pipeline it‚Äôs recommended to ensure you have a good coverage of tests to ensure when deploying that nothing is broken (too much) and pushed out to your production environment."}]},{"_type":"block","markDefs":[{"_key":"b60595527ba6","_type":"link","href":"/posts/pm2-deployment-gitlab-ci"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Gitlab has built in CI/CD which makes this an easy process to implement, I have touched on deploying with Gitlab in a "},{"_type":"span","marks":["b60595527ba6"],"text":"previous"},{"_type":"span","marks":[],"text":" article, but I haven‚Äôt gone into much detail on running the tests, which are fairly simple to setup."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I am going to base this article around using the "},{"_type":"span","marks":["code"],"text":"node-config"},{"_type":"span","marks":[],"text":" package. Setting up environment variables is as easy as creating a new file which will map to the "},{"_type":"span","marks":["code"],"text":"NODE_ENV"},{"_type":"span","marks":[],"text":" so for this I will create a "},{"_type":"span","marks":["code"],"text":"test.json"},{"_type":"span","marks":[],"text":" which will point to environmental variables and will override the defaults."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The two configs above show how the "},{"_type":"span","marks":["code"],"text":"test.json"},{"_type":"span","marks":[],"text":" will use the environment variable "},{"_type":"span","marks":["code"],"text":"MONGO_URI"},{"_type":"span","marks":[],"text":" and will use this to overwrite what is in the "},{"_type":"span","marks":["code"],"text":"default.json"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now we are able to setup a "},{"_type":"span","marks":["code"],"text":"SECRET"},{"_type":"span","marks":[],"text":" in Gitlab which will create an environment variable. You can do this from your project, "},{"_type":"span","marks":["code"],"text":"Settings -> CI/CI -> Variables"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Gitlab Services"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"So far I have shown how to set up the environment so that we can change a db_url so that we can run our test suite against a actual db. If you are testing locally you are probably running a db like mongo in Docker or just have it installed and are pointing to it via "},{"_type":"span","marks":["code"],"text":"localhost"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Gitlab has what are called "},{"_type":"span","marks":["strong","em"],"text":"Services"},{"_type":"span","marks":[],"text":" which are containers which provide a service to your app during it‚Äôs pipeline."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"With the above example lines 9‚Äì10 are setting up the service which we require during that stage of the pipeline. This will spin up a "},{"_type":"span","marks":["code"],"text":"Mongo"},{"_type":"span","marks":[],"text":" container alongside the container which is spun up to run your tests. You will have access it via the service name. For example: "},{"_type":"span","marks":["code"],"text":"mongodb://mongo:27017/test"},{"_type":"span","marks":[],"text":" or using a different service "},{"_type":"span","marks":["code"],"text":"postgres://postgres:8001"},{"_type":"span","marks":[],"text":" with both "},{"_type":"span","marks":["code"],"text":"mongo"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"postgres"},{"_type":"span","marks":[],"text":" being the name of the service/container."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Using the "},{"_type":"span","marks":["code"],"text":"script"},{"_type":"span","marks":[],"text":" part of the stage, we can inform the pipeline what it should be doing, so in the example I am installing the latest version of "},{"_type":"span","marks":["code"],"text":"npm"},{"_type":"span","marks":[],"text":" I am then installing all deps using "},{"_type":"span","marks":["code"],"text":"npm i"},{"_type":"span","marks":[],"text":" and then running the test command."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Within my "},{"_type":"span","marks":["code"],"text":"test"},{"_type":"span","marks":[],"text":" command I am running the package "},{"_type":"span","marks":["code"],"text":"nyc"},{"_type":"span","marks":[],"text":" which will create a coverage report. The last statement in this pipeline informs Gitlab how to read the coverage report and where to find the values. Gitlab can then show the coverage in your job output, also you can create badges to show in your "},{"_type":"span","marks":["code"],"text":"README"},{"_type":"span","marks":[],"text":" which will show the test coverage."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Deploy"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Once all of your tests have passed it will move on to the next stage of your pipeline which in my example is deploying to Heroku using the "},{"_type":"span","marks":["code"],"text":"dpl"},{"_type":"span","marks":[],"text":" package. If any tests fail the deploy stage will not be executed. This is important to prevent any errors getting deployed to your production environment."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You can also set up your deploy pipeline to be manual rather than auto-deploy, what this means is once your tests have passed it will require you to actively click a deploy button to run the deploy stage and publish to your production environment. This could be useful as a last step to check over any changes before deploying."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-01-15T09:00:00.000+00:00","publishedAt":"2020-01-15T09:00:00.000+00:00","title":"Gitlab SSH Deployment","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./mike-benna-X-NAMq6uP3Q-unsplash.jpg","alt":"Mike Benna - Unsplash"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This has been a draft for quite a few months as I have been pretty busy with home life and work life. So finally getting around to sitting down and finishing this up to share. Although I have titled this for Gitlab the same principles apply for Github / Travis."}]},{"_type":"block","markDefs":[{"_key":"61e307870985","_type":"link","href":"/posts/pm2-deployment-gitlab-ci"},{"_key":"fc22dc3306df","_type":"link","href":"https://zeit.co/home"},{"_key":"e6669143579a","_type":"link","href":"https://www.netlify.com/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"I've written an article previously on how to deploy to "},{"_type":"span","marks":["61e307870985"],"text":"Heroku"},{"_type":"span","marks":[],"text":" but this article is for those that are deploying to servers like an EC2 instance for example. Not everyone is deploying to the new hotness of things like "},{"_type":"span","marks":["fc22dc3306df"],"text":"zeit now"},{"_type":"span","marks":[],"text":" or "},{"_type":"span","marks":["e6669143579a"],"text":"netlify"},{"_type":"span","marks":[],"text":". I was working on a client that was using EC2 instances and I was getting a fed up with having to do manual deploys after each merge, so spent a bit of extra time setting this up so that I could merge and have the code deployed saving me some time in the long run."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Configuring the SSH keys"}]},{"_type":"block","markDefs":[{"_key":"8b7408a3eb91","_type":"link","href":"https://docs.gitlab.com/ee/ci/ssh_keys/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"To start I read the "},{"_type":"span","marks":["8b7408a3eb91"],"text":"docs"},{"_type":"span","marks":[],"text":" for configuring the CI container to have access to an SSH key. The documentation explains how you either create a new SSH key pair, or you can use an existing pair and inject this into the build environment."}]},{"_type":"block","markDefs":[{"_key":"6bb8a39614be","_type":"link","href":"https://gitlab.com/help/ci/variables/README#secret-variables"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"The SSH public key should be added to Gitlab's environment "},{"_type":"span","marks":["6bb8a39614be"],"text":"secrets"},{"_type":"span","marks":[],"text":", I have called it "},{"_type":"span","marks":["code"],"text":"SSH_KEY"},{"_type":"span","marks":[],"text":" but you may call it whatever you like as long as you ensure the same name is used within the script."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Below is a "},{"_type":"span","marks":["code"],"text":".gitlab-ci.yml"},{"_type":"span","marks":[],"text":" file that I have for reference on how it should look, I will go through a few of the steps explaining in a little more detail."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/e422658134f87c6e43d55baa258c14f1#.gitlab-ci.yml"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"First up we configure a "},{"_type":"span","marks":["code"],"text":"before_script"},{"_type":"span","marks":[],"text":" that will ensure that we have ssh and git installed."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"On line 13 - "},{"_type":"span","marks":["code"],"text":"eval $(ssh-agent -s)"},{"_type":"span","marks":[],"text":" we are starting an "},{"_type":"span","marks":["code"],"text":"ssh-agent"},{"_type":"span","marks":[],"text":" session, which we will then add our SSH key to on line 14. We then need to add and verify the "},{"_type":"span","marks":["code"],"text":"ssh_known_hosts"},{"_type":"span","marks":[],"text":" with "},{"_type":"span","marks":["code"],"text":"ssh-keyscan"},{"_type":"span","marks":[],"text":", you will need to update with the address of the server you are connecting to and ensure the directory has the correct permissions which are "},{"_type":"span","marks":["code"],"text":"644"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"The deploy"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now we have a way to login to the server securely we are free to do a deploy to the server. This can be configured however you like, for example, it could just run a script on the server that does some git logic to pull and restart the build or you might want to SCP over any built artifacts from Gitlab to the server."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In my example, I am simply logging into the remote server and doing a git pull, but you might need to also restart the service."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-02-21T09:00:00.000+00:00","publishedAt":"2020-02-21T09:00:00.000+00:00","title":"ES6 Tips & Tricks","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"karol-kasanicky-PErZP0WKQNU-unsplash.jpg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I wanted to put together a few useful tips & tricks that I find handy, mostly for me as a resource to look back at when I inevitably forget. I am not going to write about all the ES6 features as most of them are pretty well known, this is more of a handy resource for a few things I find useful."}]},{"_type":"block","markDefs":[],"style":"h1","children":[{"_type":"span","marks":[],"text":"Optional Object Properties"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is one I use fairly often as I find it a neat way to add conditionally properties to an object without lots of if statements."}]},{"_type":"code","code":"const hobbies = ['hiking'] const address = null const hasHobbies = hobbies.length > 0 const person = { name: 'Matt', age: 30, // Add this if there are hobbies ...(hasHobbies && { hobbies }), // Add address if exists, otherwise use a default ...(address ? { address } : { address: defaultAddress }) } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I think having all the potential properties around an object at the place of the definition of the object makes it easier at a glance to know what that object contains. Whereas the following I think is less glanceable:"}]},{"_type":"code","code":"const hobbies = ['hiking'] const address = null const person = { name: 'Matt', age: 30 } if (hobbies.length > 0) { person.hobbies = hobbies } if (address) { person.address = address } else { person.address = defaultAddress } ","language":"js"},{"_type":"block","markDefs":[],"style":"h1","children":[{"_type":"span","marks":[],"text":"Object Spread Property Removal"}]},{"_type":"block","markDefs":[{"_key":"e4e2de626558","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is a nice way to discard a property from an object, create a helper function that you can pass an object and which property you wish to remove and it will return the result. This makes use of the "},{"_type":"span","marks":["e4e2de626558"],"text":"Spread Syntax"},{"_type":"span","marks":[],"text":"."}]},{"_type":"code","code":"const person = { fname: 'Matt', lname: 'Chaffe', age: 30 } function removePropertyFromObject (obj, propertyName) { const { [propertyName]: discard, ...remainingProperties } = obj return remainingProperties } removePropertyFromObject(person, 'age') //-> { fname: 'Matt', lname: 'Chaffe' } ","language":"js"},{"_type":"block","markDefs":[],"style":"h1","children":[{"_type":"span","marks":[],"text":"Array Concatenation"}]},{"_type":"block","markDefs":[{"_key":"46738f218033","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"A way to concatenate arrays making use of the "},{"_type":"span","marks":["46738f218033"],"text":"Spread Syntax"},{"_type":"span","marks":[],"text":", to empty the array being spread into the new array being created."}]},{"_type":"code","code":"const array1 = [1, 2, 3] const array2 = [4, 5, 6] const result = [...array1, ...array2] //-> [1, 2, 3, 4, 5, 6] ","language":"js"},{"_type":"block","markDefs":[],"style":"h1","children":[{"_type":"span","marks":[],"text":"Template Literals"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is pretty commonly used, but I wanted to share it regardless because I think it's a really concise way to concatenate strings."}]},{"_type":"code","code":"const firstName = 'Matt' const lastName = 'Chaffe' const fullName = `${firstName} ${lastName}` // Matt Chaffe ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Over the more traditional way of string concatenation:"}]},{"_type":"code","code":"const firstName = 'Matt' const lastName = 'Chaffe' const fullName = firstName + ' ' + lastName // Matt Chaffe ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-05-19T13:00:00.000+01:00","publishedAt":"2020-05-19T13:00:00.000+01:00","title":"Five Performance Tips for Vue","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./cristian-escobar-abkEAOjnY0s-unsplash.jpg","alt":"Photo by Cristian Escobar on Unsplash"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I wanted to put together a few useful tips for ensuring good performance of your Vue app. This is not an exhaustive list and mostly depends on how complex your application is."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"Tips"}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"#1"}]}]}
{"_type":"post","_createdAt":"2019-01-11T16:35:21.084+00:00","publishedAt":"2019-01-11T16:35:21.084+00:00","title":"React Native OAuth","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./phone.jpeg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I just want to start with I have little to no experience with React or React Native so there are likely things I am doing which could be improved, but I wanted to learn and have to start somewhere."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I decided to begin with getting an OAuth workflow within React Native. I‚Äôm going to run through this from a Mac OSX user perspective, and for a target of iOS."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Getting Started"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Where better to get started than following the Getting Started guide, I initially followed the Expo flow as this was the one which is shown by default. But I soon learned that with OAuth you need to install some native dependencies for the Auth flow."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To create the app initially it‚Äôs fairly straight forward, install the cli "},{"_type":"span","marks":["code"],"text":"npm install -g react-native-cli"},{"_type":"span","marks":[],"text":" and then create your project "},{"_type":"span","marks":["code"],"text":"react-native init MyAwesomeAuthApp"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Adding Auth"}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Installation"}]},{"_type":"block","markDefs":[{"_key":"c967dce6c7ef","_type":"link","href":"https://github.com/FormidableLabs/react-native-app-auth"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"For the Auth, I am going to use the "},{"_type":"span","marks":["c967dce6c7ef"],"text":"React Native App Auth"},{"_type":"span","marks":[],"text":" package, which allows OAuth 2.0 and OpenID Connect providers."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Install and link the native package via the following:"}]},{"_type":"code","code":"npm i react-native-app-auth react-native link react-native-app-auth ","language":"bash"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The "},{"_type":"span","marks":["code"],"text":"link"},{"_type":"span","marks":[],"text":" part is what adds the native dependencies to the "},{"_type":"span","marks":["code"],"text":"ios"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"andriod"},{"_type":"span","marks":[],"text":" builds. I opted to use the Carthage step to add the dependencies as I had some issues with the Cocoa pods not working correctly to install the dependency. Start by navigate into the "},{"_type":"span","marks":["code"],"text":"iOS"},{"_type":"span","marks":[],"text":" folder and create a "},{"_type":"span","marks":["code"],"text":"Cartfile"},{"_type":"span","marks":[],"text":" with the following contents:"}]},{"_type":"code","code":"github \"openid/AppAuth-iOS\" \"master\" ","language":"bash"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You will need to have "},{"_type":"span","marks":["code"],"text":"carthage"},{"_type":"span","marks":[],"text":" installed which you can do with "},{"_type":"span","marks":["code"],"text":"brew install carthage"},{"_type":"span","marks":[],"text":". Once you have installed and created the "},{"_type":"span","marks":["code"],"text":"Cartfile"},{"_type":"span","marks":[],"text":" you can run "},{"_type":"span","marks":["code"],"text":"carthage update ‚Äî platform iOS"},{"_type":"span","marks":[],"text":" to install the packages."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Once this has completed you will need to copy the "},{"_type":"span","marks":["code"],"text":"AppAuth.framework"},{"_type":"span","marks":[],"text":" which is located in "},{"_type":"span","marks":["code"],"text":"ios/Carthage/Build/iOS"},{"_type":"span","marks":[],"text":" and add that to "},{"_type":"span","marks":["code"],"text":"Frameworks"},{"_type":"span","marks":[],"text":" within Xcode. Finally setup a "},{"_type":"span","marks":["code"],"text":"Copy Files"},{"_type":"span","marks":[],"text":" phase within the "},{"_type":"span","marks":["code"],"text":"Build Phases"},{"_type":"span","marks":[],"text":", pick "},{"_type":"span","marks":["code"],"text":"Frameworks"},{"_type":"span","marks":[],"text":" as the destination and add "},{"_type":"span","marks":["code"],"text":"AppAuth.framework"},{"_type":"span","marks":[],"text":" and be sure to check the "},{"_type":"span","marks":["code"],"text":"Code Sign on Copy"},{"_type":"span","marks":[],"text":" option."}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"Xcode setup"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We are going to need to open the "},{"_type":"span","marks":["code"],"text":"ios"},{"_type":"span","marks":[],"text":" project in "},{"_type":"span","marks":["code"],"text":"Xcode"},{"_type":"span","marks":[],"text":" now to finish the setup. From within the "},{"_type":"span","marks":["code"],"text":"ios"},{"_type":"span","marks":[],"text":" folder if you run "},{"_type":"span","marks":["code"],"text":"open MyAuthApp.xcodeproj"},{"_type":"span","marks":[],"text":" this should open "},{"_type":"span","marks":["code"],"text":"Xcode"},{"_type":"span","marks":[],"text":"."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Once the project is open, expand the folder which says the project name in my case "},{"_type":"span","marks":["code"],"text":"MyAuthApp"},{"_type":"span","marks":[],"text":" you should see a file called "},{"_type":"span","marks":["code"],"text":"AppDelegate.h"},{"_type":"span","marks":[],"text":" you can replace it‚Äôs contents with the following:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/59fe11ac4a25e1eeaad47cfb32de9ac9#AppDelegate.h"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This sets up the "},{"_type":"span","marks":["code"],"text":"AuthorisationFlowManager"},{"_type":"span","marks":[],"text":", and you will need to update the "},{"_type":"span","marks":["code"],"text":"AppDelegate.m"},{"_type":"span","marks":[],"text":" also to allow the openUrl method to feed the authorisation into the app. Before the call to the "},{"_type":"span","marks":["code"],"text":"@end"},{"_type":"span","marks":[],"text":" of the "},{"_type":"span","marks":["code"],"text":"AppDelegate.m"},{"_type":"span","marks":[],"text":" file add this:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/4ce33926f972a283ad557685db4e3367#AppDelegate.m"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This completes the Auth setup and installation, you should now be able to run "},{"_type":"span","marks":["code"],"text":"react-native run-ios"},{"_type":"span","marks":[],"text":" and see a running application within a simulator. This may take a while and will confirm that the setup is complete if all goes well. We haven‚Äôt added any auth to the actual React app yet, so this is just to clarify that everything worked."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Adding Auth"}]},{"_type":"block","markDefs":[],"style":"h4","children":[{"_type":"span","marks":[],"text":"OAuth flow"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We have installed the package and set it all up, now we need to add Auth to the React app. We are going to keep this simple for now and just going to add a button which will run the authentication."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/31dea6f34633bc086865ccb0876cf378#App.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In the above snippet, I‚Äôve updated the generated "},{"_type":"span","marks":["code"],"text":"App.js"},{"_type":"span","marks":[],"text":" file which "},{"_type":"span","marks":["code"],"text":"react-native"},{"_type":"span","marks":[],"text":" creates by default. I‚Äôve removed some of the initial text and added a login button. I‚Äôve imported the auth package and created an "},{"_type":"span","marks":["code"],"text":"_authorize"},{"_type":"span","marks":[],"text":" method which will open the chosen auth providers login page."}]},{"_type":"block","markDefs":[{"_key":"4251841e6e1a","_type":"link","href":"https://developers.google.com/identity/protocols/OAuth2"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"For the example above I have chosen Google. You will need to set up the "},{"_type":"span","marks":["4251841e6e1a"],"text":"OAuth"},{"_type":"span","marks":[],"text":" credentials and add them to the "},{"_type":"span","marks":["code"],"text":"clientId"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"redirectUrl"},{"_type":"span","marks":[],"text":" once you have done this you should be able to reload the app and press the "},{"_type":"span","marks":["code"],"text":"login"},{"_type":"span","marks":[],"text":" button to be taken to the Google login screen! Yeah!!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading. I‚Äôm no React expert so if you have anything I‚Äôve done wrong or could be improved I‚Äôd appreciate any comments or messages!"}]},{"_type":"block","markDefs":[{"_key":"b95501782d54","_type":"link","href":"https://github.com/Mattchewone/react-native-oauth"}],"style":"normal","children":[{"_type":"span","marks":["b95501782d54","strong"],"text":"Mattchewone/react-native-oauth"}]}]}
{"_type":"post","_createdAt":"2020-04-30T13:00:00.000+01:00","publishedAt":"2020-04-30T13:00:00.000+01:00","title":"Magic Numbers","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./james-harrison-vpOeXr5wmR4-unsplash.jpg","alt":"MacBook on table - James Harrison"}}]},{"_type":"block","style":"blockquote","markDefs":[],"children":[{"_type":"span","marks":[],"text":"This is part of a series of short posts on improving code readability"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"In this short post I want to discuss the use of Magic Numbers, what they are, and how not using them can make reading code a little easier!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"First up, what is a Magic Number you might be asking? It's usually a number that's used directly and not stored within a variable."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"A simple contrived example of this would be:"}]},{"_type":"code","code":"const users = [{ name: 'Matt', age: 30 }, { name: 'Austin', age: 20 }].filter(user => user.age >= 21) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This doesn't look so bad, but say this "},{"_type":"span","marks":["code"],"text":"21"},{"_type":"span","marks":[],"text":" number is used in many places, and in future needs to be updated you would need to find all the places to update in multiple files. Having this stored as variable/constant and imported where needed makes updating much easier. It also has improved readability because the name of the variable should provide some context on what the number means."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This could be re-written like:"}]},{"_type":"code","code":"const { isOverDrinkingAge } = require('./constants') const users = [{ name: 'Matt', age: 30 }, { name: 'Austin', age: 20 }].filter(user => user.age >= isOverDrinkingAge) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Looking at this now, you can see that the user's array will now only contain users over the drinking age."}]},{"_type":"block","markDefs":[{"_key":"1c343005c621","_type":"link","href":"https://eslint.org/docs/rules/no-magic-numbers"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"To help with this for consistency within your project I would recommend using something like "},{"_type":"span","marks":["1c343005c621"],"text":"eslint"},{"_type":"span","marks":[],"text":", ensuring you have the "},{"_type":"span","marks":["code"],"text":"no-magic-numbers"},{"_type":"span","marks":[],"text":" rule enabled."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2020-05-13T13:00:00.000+01:00","publishedAt":"2020-05-13T13:00:00.000+01:00","title":"Extracting Magic Expressions","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./cristian-escobar-abkEAOjnY0s-unsplash.jpg","alt":"Photo by Cristian Escobar on Unsplash"}}]},{"_type":"block","markDefs":[{"_key":"83c42a4d2c4f","_type":"link","href":"/tag/readable-code"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is the second part of my "},{"_type":"span","marks":["83c42a4d2c4f"],"text":"readable code"},{"_type":"span","marks":[],"text":" series!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Previously we went through how to not use Magic Numbers to make our code more readable and also help improve future maintenance of our code. In this article we are going to discuss how to extract Magic Expressions."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"What is a Magic Expression"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You might well be asking what is a Magic Expression? Rightly so, I don't think this is a technical term for this but I'm going with it. The following is an example of this (a picture explains a thousand words, I don't have a picture so a code snippet will suffice):"}]},{"_type":"code","code":"const juniorAge = 18 const requiredHobbiesLength = 1 const user = { name: 'Jane', age: 30, hobbies: [{ name: 'Tennis' }] } if (user.age >= juniorAge && user.hobbies.length >= requiredHobbiesLength) { // Do something... } ","language":"js{10}"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The above highlight line shows the expression which I deem to be \"Magic\"..."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"https://media1.giphy.com/media/12NUbkX6p4xOO4/giphy.gif","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Ok well you got me, it's not really \"Magic\", but it does make for harder reading when you have lots of expressions, this is especially more difficult to read when they become multiline."}]},{"_type":"block","markDefs":[],"style":"h2","children":[{"_type":"span","marks":[],"text":"How to make these less magical"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"To make these expressions easier to read and to help future you, I would highly recommend that you extract these into well named variables. Let's continue with an example:"}]},{"_type":"code","code":"const juniorAge = 18 const requiredHobbiesLength = 1 const user = { name: 'Jane', age: 30, hobbies: [{ name: 'Tennis' }] } const isUserAboveJuniorAge = user.age >= juniorAge const isUserAboveHobbiesRequired = user.hobbies.length >= requiredHobbiesLength if (isUserAboveJuniorAge && isUserAboveHobbiesRequired) { // Do something... } ","language":"js{11"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is starting to look much better, the variable names help when scanning the code you can clearly see what is being checked and what is required for the if statement to be executed. But we could go even further:"}]},{"_type":"code","code":"... const isUserAboveJuniorAge = user.age >= juniorAge const isUserAboveHobbiesRequired = user.hobbies.length >= requiredHobbiesLength const isAgeAndHobbieSuitable = isUserAboveJuniorAge && isUserAboveHobbiesRequired if (isAgeAndHobbieSuitable) { // Do something... } ","language":"js{6,8}"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Now we have a very readable codebase which almost self documents itself, I say almost I would still recommend you document your code!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2019-05-22T21:00:00.000+01:00","publishedAt":"2019-05-22T21:00:00.000+01:00","title":"Socket Fixtures Debugging","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./markus-spiske-445253-unsplash.jpg","alt":"Photo by Markus Spiske on Unsplash"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Recently I was upgrading a project to use the latest versions of "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" client packages, which was a relatively easy and straightforward upgrade. The project is written with "},{"_type":"span","marks":["code"],"text":"canjs"},{"_type":"span","marks":[],"text":" and we have been using "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":" to mock socket requests and return mocked data from "},{"_type":"span","marks":["code"],"text":"can-fixture"},{"_type":"span","marks":[],"text":". I noticed after the upgrade that about 30% of my tests were now failing, specifically the tests which had been making server requests The error was a socket timeout. The app was working as I had manually tested the functionality of the app, so this was only an issue with the tests."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This got me head scratching; I reverted the upgrade and the tests were passing as expected. I then started to look to see if I had a package mismatch and perhaps "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" was using a different version of "},{"_type":"span","marks":["code"],"text":"socket-client.io"},{"_type":"span","marks":[],"text":" compared to what "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":" was using."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I created a demo app, which just had "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":" but I was getting the same issue, a socket timeout. Opening up the debugger in Chrome and stepping through "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":", I could see that it was "},{"_type":"span","marks":["code"],"text":"emitting"},{"_type":"span","marks":[],"text":" the event, and after spending a while stepping through the internals I decided a break was needed."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Refreshed and raring to go again, I thought I'd try one more attempt figuring out what was going on. I added a simple event handler for an event:"}]},{"_type":"code","code":"mockServer.on('messages::find', data => { console.log('messages::find', { data }) }) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This time I could see the handler being added to the array of "},{"_type":"span","marks":["code"],"text":"listeners"},{"_type":"span","marks":[],"text":" as I was stepping through. I saw the "},{"_type":"span","marks":["code"],"text":"find"},{"_type":"span","marks":[],"text":" event fire, but still, no "},{"_type":"span","marks":["code"],"text":"console.log"},{"_type":"span","marks":[],"text":" message! I was deep in the rabbit hole (no breaks), and it took me way too long to notice that the issue was the name of the event that was being emitted. As such, when checking the handler for this event, it would not find one registered with this eventName. Legacy "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" would namespace the eventNames as "},{"_type":"span","marks":["code"],"text":"messages::find"},{"_type":"span","marks":[],"text":", but in the latest release they have changed this so the name of the event is the method, ie "},{"_type":"span","marks":["code"],"text":"find"},{"_type":"span","marks":[],"text":" and the serviceName is now passed in as an argument to the emitted data."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is an example of what "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" is emitting:"}]},{"_type":"code","code":"connection.emit(['find', 'messages', {}, {}]) ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Because of this I made a fix to "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":" to be able to handle this newer format, if you are using the latest version of "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":" and would like to make use of mocking the socket connection I'd recommend looking into "},{"_type":"span","marks":["code"],"text":"can-fixture-socket"},{"_type":"span","marks":[],"text":" especially now as it will work for the newer format of "},{"_type":"span","marks":["code"],"text":"feathersjs"},{"_type":"span","marks":[],"text":"!"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"A quick take away from this for me is to take regular breaks and to get a second pair of eyes on the issue if you have been stuck on the same issue for too long. After spotting the issue I feel that may have been picked up more quickly if I had someone else looking over it with me."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
{"_type":"post","_createdAt":"2018-06-15T11:35:04.577+01:00","publishedAt":"2018-06-15T11:35:04.577+01:00","title":"Vue Authentication with FeathersJS","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./padlocks.jpg","alt":"null"}}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"FeathersJS Authentication"}]},{"_type":"block","markDefs":[{"_key":"b9b5f8e50147","_type":"link","href":"https://feathersjs.com/"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Authenticating against a "},{"_type":"span","marks":["b9b5f8e50147"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" server is pretty simple, I am going to use the "},{"_type":"span","marks":["code"],"text":"local"},{"_type":"span","marks":[],"text":" strategy which is by default "},{"_type":"span","marks":["code"],"text":"email/password"},{"_type":"span","marks":[],"text":" based as my examples. In order to "},{"_type":"span","marks":["code"],"text":"authenticate"},{"_type":"span","marks":[],"text":" against a typical setup you would via rest post to "},{"_type":"span","marks":["code"],"text":"/authenticate"},{"_type":"span","marks":[],"text":" which will give you an "},{"_type":"span","marks":["code"],"text":"accessToken"},{"_type":"span","marks":[],"text":" as a response which you can add to your http Authorization header if you are doing a standard REST request."}]},{"_type":"code","code":"{ \"strategy\": \"local\", \"email\": \"user@local.dev\", \"password\": \"1234\" } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"There is a however a client library for "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" which will help with connecting to a "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" API and you can use it like:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/fa4152f6e8240dfcdd2a04d4b6905d2b#feathers-client.js"}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Vue &¬†Vuex"}]},{"_type":"block","markDefs":[{"_key":"088890093e07","_type":"link","href":"https://feathers-plus.github.io/v1/feathers-vuex/index.html"},{"_key":"87bd0297c06c","_type":"link","href":"https://medium.com/@mattchewone/feathersjs-nuxt-ssr-authentication-75e97b6ce125"}],"style":"normal","children":[{"_type":"span","marks":[],"text":"Right now lets talk about using "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" services within "},{"_type":"span","marks":["code"],"text":"Vuex"},{"_type":"span","marks":[],"text":" I will be using "},{"_type":"span","marks":["088890093e07"],"text":"feathers-vuex"},{"_type":"span","marks":[],"text":" to match up "},{"_type":"span","marks":["code"],"text":"Vuex"},{"_type":"span","marks":[],"text":" and "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":". Similar setup to my previous "},{"_type":"span","marks":["87bd0297c06c"],"text":"article"},{"_type":"span","marks":[],"text":" except we will need to authenticate on the client. Let me show you first how to add the "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" services to "},{"_type":"span","marks":["code"],"text":"Vuex"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/61f2150704707c1df9e7353dbd86a8e2#store.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We pull in the "},{"_type":"span","marks":["code"],"text":"feathers-client"},{"_type":"span","marks":[],"text":" which defines the setup to the "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" API, and we can then add each service which will add a "},{"_type":"span","marks":["code"],"text":"namespaced"},{"_type":"span","marks":[],"text":" module to "},{"_type":"span","marks":["code"],"text":"Vuex"},{"_type":"span","marks":[],"text":". A very simple look at a basic component which will fetch data from the API and will read from the store using a reactive getter:"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/07c512a86fba3ff7b1b0529e533fb655#Movie.vue"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Use a "},{"_type":"span","marks":["code"],"text":"mapActions"},{"_type":"span","marks":[],"text":" namespace, and then pull in the action I wish to use, so here I am using the "},{"_type":"span","marks":["code"],"text":"find"},{"_type":"span","marks":[],"text":" action so I can lookup data from the API. I call this within the "},{"_type":"span","marks":["code"],"text":"created"},{"_type":"span","marks":[],"text":" lifecycle hook so the store is populated with data from that query. The "},{"_type":"span","marks":["code"],"text":"mapGetters"},{"_type":"span","marks":[],"text":" then pulls in data using the same query used to get the data from the API and if you have setup events/channels within your "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" API will get updated when events are fired."}]},{"_type":"block","markDefs":[],"style":"h3","children":[{"_type":"span","marks":[],"text":"Authentication"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I realise I have gone off topic a little, so let‚Äôs get back on track with "},{"_type":"span","marks":["strong"],"text":"Authentication"},{"_type":"span","marks":[],"text":". When calling using the "},{"_type":"span","marks":["code"],"text":"FeathersJS"},{"_type":"span","marks":[],"text":" client libraries, if setup with "},{"_type":"span","marks":["code"],"text":"LocalStorage"},{"_type":"span","marks":[],"text":" it will automatically store the token from the "},{"_type":"span","marks":["code"],"text":"authenticate"},{"_type":"span","marks":[],"text":" request, this means that upon a browser refresh if you call "},{"_type":"span","marks":["code"],"text":"authenticate"},{"_type":"span","marks":[],"text":" without any params it will use the token from the "},{"_type":"span","marks":["code"],"text":"LocalStorage"},{"_type":"span","marks":[],"text":" and if valid you will be authenticated."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/23ad22d0614ba80dd4129985cb056267#main.js"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Here I try to authenticate using the "},{"_type":"span","marks":["code"],"text":"LocalStorage"},{"_type":"span","marks":[],"text":" token, and ignore if it fails, this will populate the payload within the "},{"_type":"span","marks":["code"],"text":"auth"},{"_type":"span","marks":[],"text":" module of the store. I run the "},{"_type":"span","marks":["code"],"text":"authenticate"},{"_type":"span","marks":[],"text":" before I initiate the "},{"_type":"span","marks":["code"],"text":"Vue"},{"_type":"span","marks":[],"text":" app so that any subsequent requests within components are "},{"_type":"span","marks":["code"],"text":"authenticated"},{"_type":"span","marks":[],"text":" (should the initial "},{"_type":"span","marks":["code"],"text":"authentication"},{"_type":"span","marks":[],"text":" request return successful)."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I also setup a "},{"_type":"span","marks":["code"],"text":"beforeEach"},{"_type":"span","marks":[],"text":" on the router to check whether we have a valid user in the store and if the route requires "},{"_type":"span","marks":["code"],"text":"authentication"},{"_type":"span","marks":[],"text":". Here is how I would setup some basic navigation to show links to logged in users and non-logged in users"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":["code"],"text":"gist:Mattchewone/b1386fbe0d76be1ed18a2e5a8befcd8f#App.vue"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"I use a computed property to map to the user within the "},{"_type":"span","marks":["code"],"text":"auth"},{"_type":"span","marks":[],"text":" module of "},{"_type":"span","marks":["code"],"text":"Vuex"},{"_type":"span","marks":[],"text":" so that if a user is logged in or logs out this will update the navigation without having to handle watching any changes."}]},{"_type":"block","markDefs":[{"_key":"ccb458679762","_type":"link","href":"https://github.com/Mattchewone/feathersjs-vuex-demo-ui"}],"style":"normal","children":[{"_type":"span","marks":["ccb458679762","strong"],"text":"Mattchewone/feathersjs-vuex-demo-ui"}]},{"_type":"block","markDefs":[{"_key":"8046ddac4659","_type":"link","href":"https://github.com/Mattchewone/feathersjs-vuex-demo-api"}],"style":"normal","children":[{"_type":"span","marks":["8046ddac4659","strong"],"text":"Mattchewone/feathersjs-vuex-demo-api"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This is a work in progress, so if you notice anything wrong or even better any improvements then please let me know!¬†:)"}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Enjoy!"}]}]}
{"_type":"post","_createdAt":"2020-09-15T10:00:00.000+01:00","publishedAt":"2020-09-15T10:00:00.000+01:00","title":"Understanding GraphQL Resolvers","body":[{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"img","asset":{"src":"./arian-darvishi-wh-RPfR_3_M-unsplash.jpg","alt":"Photo by Arian Darvishi"}}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Let's start by talking about what a resolver is. A GraphQL Resolver is a function that is responsible for populating the data for a single field in your schema. What does this mean? Let's try to break it down, here is some data first:"}]},{"_type":"code","code":"// Data in memory let person = { name: 'Matt', hobbies: [{ name: 'walking' }, { name: 'cycling' }] } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We have a simple object which contains a name property and an array of hobbies. Given the following Schema and initial query resolver, we can see how these resolvers work."}]},{"_type":"code","code":"// GraphQL Schema type Query { person: Person } type Person { name: String! hobbies: [Hobbies] } type Hobbies { name: String! } const resolvers = { Query: { person (parent, args, context) { return person } } } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We define the schema with the "},{"_type":"span","marks":["code"],"text":"type"},{"_type":"span","marks":[],"text":" keyword, "},{"_type":"span","marks":["code"],"text":"Query"},{"_type":"span","marks":[],"text":" being the main entry point for all our GraphQL queries. The "},{"_type":"span","marks":["code"],"text":"Query"},{"_type":"span","marks":[],"text":" has one property "},{"_type":"span","marks":["code"],"text":"person"},{"_type":"span","marks":[],"text":" which then references the "},{"_type":"span","marks":["code"],"text":"Person"},{"_type":"span","marks":[],"text":" definition, so we can now query for the \"name\" & \"hobbies\" properties. The "},{"_type":"span","marks":["code"],"text":"return person"},{"_type":"span","marks":[],"text":" within our resolver is the data that in our instance is in memory, but this could also be a database lookup or even an API request. Given the following query:"}]},{"_type":"code","code":"// query { person { name } } // output { data: { person: { name: 'Matt' } } } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"The entire data object will be loaded, but only what was requested which was the "},{"_type":"span","marks":["code"],"text":"person.name"},{"_type":"span","marks":[],"text":" will be returned."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"But say we wanted to do something extra for the "},{"_type":"span","marks":["code"],"text":"hobbies"},{"_type":"span","marks":[],"text":" property, we could do this within a resolver, for example, add an image URL. We would need to create a resolver for that property and it would look something like, which would be a specific resolver for the hobbies when queried within the person context:"}]},{"_type":"code","code":"const resolvers = { Query: { person (parent, args, context) { return person } }, Person: { hobbies (parent, args, context) { return person.hobbies.map(hobby => { return { ...hobby, url: `https://hobbies.com/${hobby.name}` } }) } } } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Don't forget to update the type definition for "},{"_type":"span","marks":["code"],"text":"Hobbies"},{"_type":"span","marks":[],"text":":"}]},{"_type":"code","code":"type Hobbies { name: String! url: String } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"We can also be more generic and have a resolver for the "},{"_type":"span","marks":["code"],"text":"url"},{"_type":"span","marks":[],"text":" property on the "},{"_type":"span","marks":["code"],"text":"Hobbies"},{"_type":"span","marks":[],"text":" definition, which would look something like:"}]},{"_type":"code","code":"const resolvers = { Query: { person (parent, args, context) { return person } }, Hobbies: { url (parent, args, context) { return `https://hobbies.com/${parent.name}` } } } ","language":"js"},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"This gives you the flexibility if you want to have the resolver for that property always do the same thing, or if you want it to do something more specific when fetched within a specific parent property context."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"You can have the two resolvers together but the top-level "},{"_type":"span","marks":["code"],"text":"Hobbies"},{"_type":"span","marks":[],"text":" one will resolve last and as such will take precedence."}]},{"_type":"block","markDefs":[],"style":"normal","children":[{"_type":"span","marks":[],"text":"Thanks for reading!"}]}]}
